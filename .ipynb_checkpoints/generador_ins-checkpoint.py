# -*- coding: utf-8 -*-
"""Generador_INS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xfYBlb2PLlnHK7Klm7JS36H6FMH89J3q

# Generador de imagenes de insectos

## Librerias a utilizar
"""

import os
from imageio import imread, imwrite
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.models import Sequential, Model, model_from_json
from tensorflow.keras.optimizers import Adam
import tensorflow.keras.utils as ut
from random import randint

"""## Parametros de entrada y ubicación del modelo entrenado"""

generador_json = "generador.json" # archivo con los paramétros de la red
generador_h5 = "generador.h5" # archivo con los pesos de la red
ERROR = 'binary_crossentropy'# error a utilizar es la entropia cruzada
OPTIMIZADOR = Adam(lr = 0.0001, beta_1 = 0.5) # optimisador que se una variable del gradiente desendente que es estocástico lo que permite una convergencia más rápida

"""## Carga del modelo"""

# cargar json y crear el modelo
json_file = open(generador_json, 'r')
loaded_model_json = json_file.read()
json_file.close()
generador = model_from_json(loaded_model_json)

# cargar pesos al nuevo modelo
generador.load_weights(generador_h5)
print("Cargado modelo desde disco. SI!!!!!!!")

# Compilar modelo cargado y listo para usar.
generador.compile(optimizer = OPTIMIZADOR, loss = ERROR)

"""## Generar la imagén"""

# Visualización de algunas imagenes obtenidas con el generador
def graficar_imagenes_generadas(sufijo, generador, ejemplos=1, dim=(1,1), figsize=(128,128)):
    ruido = np.random.normal(0,0.99,[ejemplos,100])
    imagenes_generadas = generador.predict(ruido)
    imagenes_generadas.reshape(ejemplos,128,128,3)
    imagenes_generadas = imagenes_generadas*127.5 + 127.5
    plt.figure(figsize=figsize)
    for i in range(ejemplos):
        plt.subplot(dim[0],dim[1], i+1)
        plt.imshow(imagenes_generadas[i].astype('uint8'), interpolation='nearest')
        plt.axis('off')
    plt.tight_layout()
    plt.savefig("Ejemplo_Ins/IMG_generadas/INS_%d.png" %sufijo)
    #plt.show()
    plt.close()
    #return ruido


for i in range(1,5):
  sufijo = i
  graficar_imagenes_generadas(sufijo, generador)
  print(str(i)+"_Imagen_"+str(sufijo))

"""## Visualizar el modelo"""

# arquitectura de nuestro módelo
ut.plot_model(generador, to_file='model.png', show_shapes=True, show_layer_names=True, rankdir='TB', expand_nested=False, dpi=96)

IMG_ins = imread("Ejemplo_Ins/IMG_generadas/INS_"+str(sufijo)+".png")

plt.imshow(IMG_ins)
plt.axis('off')
plt.show()

